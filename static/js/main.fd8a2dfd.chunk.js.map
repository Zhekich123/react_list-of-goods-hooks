{"version":3,"sources":["App.tsx","index.tsx"],"names":["goodsFromServer","SortOptions","App","useState","activeSort","setActiveSort","isReversed","setIsReversed","visibleGoods","goods","options","preparedGoods","sort","a","b","Alphabetically","localeCompare","Length","length","reverse","handleSort","className","type","cn","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"uPAKaA,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAGUC,EAAZ,SAAYA,GAAZ,OAAYA,EAAZ,gCAAYA,EAAZ,gBAAYA,EAAZ,cAAYA,CAAZ,MA+BaC,EAAgB,WAC3B,MACIC,mBAAS,IADb,mBAAOC,EAAP,KAAmBC,EAAnB,KAGA,EACIF,oBAAS,GADb,mBAAOG,EAAP,KAAmBC,EAAnB,KAGMC,EA/BJ,SAACC,EACDC,GACA,IAAMC,EAAa,YAAOF,GAmB1B,OAjBAE,EAAcC,MAAK,SAACC,EAAGC,GACrB,OAAQJ,EAAQN,YACd,KAAKH,EAAYc,eACf,OAAOF,EAAEG,cAAcF,GAEzB,KAAKb,EAAYgB,OACf,OAAOJ,EAAEK,OAASJ,EAAEI,OAEtB,QACE,OAAO,EAEZ,IAEGR,EAAQJ,YACVK,EAAcQ,UAGTR,CACR,CASoBS,CAAWpB,EAAiB,CAC/CI,WAAYA,GAAcH,EAC1BK,eAoBF,OACE,sBAAKe,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IAAG,SAAU,UACtB,CAAE,WAA2B,mBAAfnB,IAChBoB,QAxBR,WACEnB,EAAc,SACf,EAkBK,iCASA,wBACEiB,KAAK,SACLD,UAAWE,IAAG,SAAU,aACtB,CAAE,WAA2B,WAAfnB,IAChBoB,QA7BR,WACEnB,EAAc,SACf,EAuBK,4BASA,wBACEiB,KAAK,SACLD,UAAWE,IAAG,SAAU,aAAc,CAAE,YAAajB,IACrDkB,QAjCR,WACEjB,GAAeD,EAChB,EA4BK,sBAQEF,GAAcE,IACd,wBACEgB,KAAK,SACLD,UAAU,4BACVG,QAtCV,WACEnB,EAAc,IACdE,GAAc,EACf,EAgCO,sBAUJ,6BACGC,EAAaiB,KAAI,SAACC,GAAD,OAChB,6BAAgBA,GAAPA,EADO,QAMzB,EC1HDC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,Q","file":"static/js/main.fd8a2dfd.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport cn from 'classnames';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nexport enum SortOptions {\n  Alphabetically = 'alphabetically',\n  Length = 'length',\n  Reset = 'reset',\n}\n\nconst handleSort\n  = (goods: string[],\n    options: { activeSort: SortOptions; isReversed: boolean }) => {\n    const preparedGoods = [...goods];\n\n    preparedGoods.sort((a, b) => {\n      switch (options.activeSort) {\n        case SortOptions.Alphabetically:\n          return a.localeCompare(b);\n\n        case SortOptions.Length:\n          return a.length - b.length;\n\n        default:\n          return 0;\n      }\n    });\n\n    if (options.isReversed) {\n      preparedGoods.reverse();\n    }\n\n    return preparedGoods;\n  };\n\nexport const App: React.FC = () => {\n  const [activeSort, setActiveSort]\n    = useState('');\n\n  const [isReversed, setIsReversed]\n    = useState(false);\n\n  const visibleGoods = handleSort(goodsFromServer, {\n    activeSort: activeSort || SortOptions,\n    isReversed,\n  } as { activeSort: SortOptions; isReversed: boolean });\n\n  function setAlphabetically() {\n    setActiveSort('length');\n  }\n\n  function setLength() {\n    setActiveSort('length');\n  }\n\n  function setReversed() {\n    setIsReversed(!isReversed);\n  }\n\n  function setReset() {\n    setActiveSort('');\n    setIsReversed(false);\n  }\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn('button', 'is-info',\n            { 'is-light': activeSort !== 'alphabetically' })}\n          onClick={setAlphabetically}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button', 'is-success',\n            { 'is-light': activeSort !== 'length' })}\n          onClick={setLength}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button', 'is-warning', { 'is-light': !isReversed })}\n          onClick={setReversed}\n        >\n          Reverse\n        </button>\n\n        {(activeSort || isReversed) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={setReset}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {visibleGoods.map((good) => (\n          <li key={good}>{good}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}