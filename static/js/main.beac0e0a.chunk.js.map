{"version":3,"sources":["App.tsx","index.tsx"],"names":["goodsFromServer","SortOptions","App","useState","None","activeSort","setActiveSort","isReversed","setIsReversed","visibleGoods","goods","options","preparedGoods","sort","a","b","Alphabetically","localeCompare","Length","length","reverse","handleSort","setSort","selectedOption","className","type","cn","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"uPAKaA,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAGUC,EAAZ,SAAYA,GAAZ,OAAYA,EAAZ,gCAAYA,EAAZ,gBAAYA,EAAZ,QAAYA,CAAZ,MA+BaC,EAAgB,WAC3B,MACIC,mBAAsBF,EAAYG,MADtC,mBAAOC,EAAP,KAAmBC,EAAnB,KAGA,EACIH,oBAAS,GADb,mBAAOI,EAAP,KAAmBC,EAAnB,KAGMC,EA/BJ,SAACC,EACDC,GACA,IAAMC,EAAa,YAAOF,GAmB1B,OAjBAE,EAAcC,MAAK,SAACC,EAAGC,GACrB,OAAQJ,EAAQN,YACd,KAAKJ,EAAYe,eACf,OAAOF,EAAEG,cAAcF,GAEzB,KAAKd,EAAYiB,OACf,OAAOJ,EAAEK,OAASJ,EAAEI,OAEtB,QACE,OAAO,EAEZ,IAEGR,EAAQJ,YACVK,EAAcQ,UAGTR,CACR,CASoBS,CAAWrB,EAAiB,CAC/CK,WAAYA,GAAcJ,EAC1BM,eAGF,SAASe,EAAQC,GACfjB,EAAciB,EACf,CAED,OACE,sBAAKC,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IAAG,SAAU,UACtB,CAAE,WAAYrB,IAAeJ,EAAYe,iBAC3CW,QAAS,kBAAML,EAAQrB,EAAYe,eAA1B,EAJX,iCASA,wBACES,KAAK,SACLD,UAAWE,IAAG,SAAU,aACtB,CAAE,WAAYrB,IAAeJ,EAAYiB,SAC3CS,QAAS,kBAAML,EAAQrB,EAAYiB,OAA1B,EAJX,4BASA,wBACEO,KAAK,SACLD,UAAWE,IAAG,SAAU,aAAc,CAAE,YAAanB,IACrDoB,QAAS,kBAAMnB,GAAeD,EAArB,EAHX,sBAQEF,GAAcE,IACd,wBACEkB,KAAK,SACLD,UAAWE,IAAG,4BAA6B,CACzC,cAAenB,EACf,iBAAkBF,IAEpBsB,QAAS,WACPL,EAAQrB,EAAYG,MACpBI,GAAc,EACf,EATH,sBAiBJ,6BACGC,EAAamB,KAAI,SAACC,GAAD,OAChB,oBAAe,UAAQ,OAAvB,SAA+BA,GAAtBA,EADO,QAMzB,ECpHDC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,Q","file":"static/js/main.beac0e0a.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport cn from 'classnames';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nexport enum SortOptions {\n  Alphabetically = 'alphabetically',\n  Length = 'length',\n  None = '',\n}\n\nconst handleSort\n  = (goods: string[],\n    options: { activeSort: SortOptions; isReversed: boolean }) => {\n    const preparedGoods = [...goods];\n\n    preparedGoods.sort((a, b) => {\n      switch (options.activeSort) {\n        case SortOptions.Alphabetically:\n          return a.localeCompare(b);\n\n        case SortOptions.Length:\n          return a.length - b.length;\n\n        default:\n          return 0;\n      }\n    });\n\n    if (options.isReversed) {\n      preparedGoods.reverse();\n    }\n\n    return preparedGoods;\n  };\n\nexport const App: React.FC = () => {\n  const [activeSort, setActiveSort]\n    = useState<SortOptions>(SortOptions.None);\n\n  const [isReversed, setIsReversed]\n    = useState(false);\n\n  const visibleGoods = handleSort(goodsFromServer, {\n    activeSort: activeSort || SortOptions,\n    isReversed,\n  } as { activeSort: SortOptions; isReversed: boolean });\n\n  function setSort(selectedOption: SortOptions) {\n    setActiveSort(selectedOption);\n  }\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn('button', 'is-info',\n            { 'is-light': activeSort !== SortOptions.Alphabetically })}\n          onClick={() => setSort(SortOptions.Alphabetically)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button', 'is-success',\n            { 'is-light': activeSort !== SortOptions.Length })}\n          onClick={() => setSort(SortOptions.Length)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button', 'is-warning', { 'is-light': !isReversed })}\n          onClick={() => setIsReversed(!isReversed)}\n        >\n          Reverse\n        </button>\n\n        {(activeSort || isReversed) && (\n          <button\n            type=\"button\"\n            className={cn('button is-danger is-light', {\n              'is-reversed': isReversed,\n              'is-active-sort': activeSort,\n            })}\n            onClick={() => {\n              setSort(SortOptions.None);\n              setIsReversed(false);\n            }}\n          >\n            Reset\n          </button>\n        )}\n\n      </div>\n\n      <ul>\n        {visibleGoods.map((good) => (\n          <li key={good} data-cy=\"Good\">{good}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}